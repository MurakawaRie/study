======================================================================
		sql문 기초 정리
======================================================================

-- 				주석달기

create table 테이블명(		테이블 만들기
컬럼1 자료형 primary key,		primary key, not null 등 설정가능
컬럼2 자료형,
컬럼3);
				또는 마지막줄에 괄호안에 primary key(컬럼이름) 으로 지정가능

select * from 테이블명
- 테이블 컬럼값 불러오기

desc 테이블명
- 테이블 내 컬럼과 자료형 확인

alter table 테이블명 add (컬럼명 자료형)
- 테이블에 컬럼 추가하기

alter table 테이블명 modify (컬럼명 자료형)
- 테이블 컬럼 자료형 바꾸기

alter table 테이블명 rename column 컬럼명 to 새컬럼명
- 컬럼 이름 바꾸기

alter table 테이블명 drop column 컬럼명
- 컬럼 삭제하기





======================================================================
		컬럼(행) 내부 값 삽입 및 열람(select)
======================================================================

insert into 테이블명 values('컬럼1값' , '컬럼2값' , '컬럼3값' ....);
- 컬럼에 값 삽입하기

delete from 테이블명 where 조건값;
- 조건값에 해당하는 모든 컬럼값 삭제

update 테이블명 set 바꿀컬럼명='바꿀내용' where 컬럼명(주로PK인것)='불러올컬럼';
- 조건값에 해당하는 컬럼을 불러와 바꿀컬럼에 대한내용 수정

select * from 테이블명 where 컬럼1 <> 'null';
select * from 테이블명 where 컬럼1 is not null;
- 컬럼1에 들어간 값이 null이 아닌 모든 컬럼 출력

select * from 테이블명 where 컬럼명 >= n1
- 해당 컬럼의 특정 값 조건에 맞는 모든 컬럼 출력

select 컬럼명2, 컬럼명3 from 테이블명 where 컬럼명 between n1 and n2
- 해당 컬럼의 n1~n2사이값인 컬럼2,컬럼3의 값을 모두 출력

select * from 테이블명 where 컬렴명1 >= n1 or 컬럼명 >= n2
- 각 컬럼들에 해당하는 컬럼 모두 출력

select * from 테이블명 where 컬럼명3 like 'K%'
- 컬럼명3이 K로 시작하는 모든 컬럼 출력

select * from 테이블명 where 컬럼명3 like '%W'
- 컬럼명3이 W로 끝나는 모든 컬럼 출력

select * from 테이블명 where 컬럼명4 in ('서적','전자')
- 컬럼명4에 '서적' , '전자'중 하나가 들어간 모든 컬럼 출력

select * from 테이블명 where 컬럼명4 = '책' or 컬럼명3 like '%W'
- 컬럼명4가 '책'이거나 컬럼명3이 W로 끝나는 모든 컬럼 출력

select * from 테이블명 where 컬럼명5 like ('%대구%')
- 컬럼명5에 대구가 들어간 컬럼 모두 출력





======================================================================
		서브쿼리(쿼리문 안에 쿼리문)
======================================================================

select * from 테이블명 where 컬럼1 >= (select 컬럼1 from 테이블명 where 컬럼A = 'string1')
- 컬럼A값 string1보다 컬럼1의 값이 큰 경우 모두 출력
- 뒤에	and 컬럼A <> 'string1'     을 붙이면 해당 컬럼 생략가능

select * from 테이블명 where 컬럼1 >= any(select 컬럼1 from 테이블명 where 컬럼B ='string2')
- 컬럼B값 string2보다 컬럼1값이 큰 경우 모두 출력
- 컬럼B값 string2에 해당하는 값이 2개 이상인 경우 아래를 같이 사용
- any(하나라도 만족하면) = or
- all(최대조건에 만족해야) = and





======================================================================
		테이블 복사하기
======================================================================

create table 새테이블명 as select * from 테이블명
- 테이블 전체를 새테이블로 복사하기(PK,FK 복사 x)

create table 새테이블명 as select * from 테이블명 where 거짓값;
- 테이블 구조만 새테이블로 복사하기

create table 새테이블명 as select * from 테이블명 where 조건넣기;
- 새테이블에 조건에 맞는 컬럼만 복사하기;

insert into 새테이블명 select * from 테이블명;
- 테이블 구조가 같을때 새테이블로 데이터 복사하기





======================================================================
		테이블 정렬하기
======================================================================
select * from 테이블명 order by 컬럼명1 asc;
- 컬럼명1 순서로 오름차순 정렬
- asc 오름차순 정렬은 기본값이라 안붙여도 된다

select * from 테이블명 order by 컬럼명1 desc;
- 컬럼명1 순서로 내림차순 정렬

select * from 테이블명 order by 컬럼명1 asc, 컬럼명2 desc;
- 컬럼명1은 오름차순, 컬럼명2는 내림차순 정렬

select distinct 컬럼명1 from 테이블명 order by 컬럼명1;
- 컬럼명1 오름차순 정렬시 중복 제거(distinct)

select distinct 컬럼명1 from 테이블명;
- 컬럼명1 검색시 중복된 아이디를 제거

select * from (select rownum as RN, 테이블명.* from 테이블명) where RN >=n1
- rownum을 추가해서 정렬한 후 rn값에 맞는 컬럼 불러오기





======================================================================
		컬럼별 총 구매수량, 그룹화
======================================================================

select 컬럼명1, sum(컬럼명2) as 이름추가하기 from 테이블명 group by 컬럼명1
- 컬럼명1의 동일값으로 묶인 컬럼들의 컬럼명2의 합을 출력

select 컬럼명1, cast(avg(컬럼명2) as decimal(5,2))from 테이블명 group by 컬럼명1
- 컬럼명1의 동일값으로 묶인 컬럼들의 컬럼명2의 평균을 출력
- cast와 decimal을 이용해 소수점 자리수 제한 가능 decimal(전체 표기자리수,소수점자리수)

select trunc(avg(컬럼명2),n) from 테이블명
- 소수점 n자리까지 제한

select max(컬럼명) from 테이블명;
select min(컬럼명) from 테이블명;
- 해당 컬럼명의 최대값과 최소값 출력

select * from 테이블명 where 컬럼명1 = (select max(컬럼명1) from 테이블명);
- 컬럼명1의 값이 제일 큰 컬럼의 모든 컬럼 출력

select count(*) from 테이블명;
- 컬럼값의 총 개수 출력

select count(컬럼명1) from 테이블명;
- 해당 컬럼에서 null값을 제외한 개수 출력





======================================================================
		그룹 조합식의 조건식과 총합계
======================================================================

select 컬럼명1, sum(컬럼명2) from 테이블명 group by 컬럼명1 having sum(컬럼명2) 조건
- where 대신 having을 쓴다

select 컬럼명1, sum(컬럼명2*컬렴명3) from 테이블명 group by rollup(컬럼명1)
- 해당 컬럼명1에 대한 (컬럼명2*컬럼명3) 값의 총합

select num, 컬럼명1, sum(컬럼명2*컬렴명3) from 테이블명 group by rollup(컬럼명1, num)
- 컬럼명1 종류별 합계(세부표시)





======================================================================
		시퀀스(sequence)
======================================================================
create sequence 시퀀스명 start with n1		시퀀스의 시작값이 n1부터 시작
increment by 1				증가값이 1씩 증가
minvalue n2				최소값이 n2부터
maxvalue n3				최대값이 n3까지
cycle nocache				cycle(최대값 도달시 시작값부터 반복)
					cache(캐시사용하여 속도가 빨라짐)


<<예제>>
create table tmp_tbl(
id int,
username char(10),
age int
);

create sequence tmp_seq start with 1
increment by 1
maxvalue 100
cycle nocache;

insert into tmp_tbl values(tmp_seq.NEXTVAL, 'aaa', 11);	id값이 1(
			-NEXTVAL : 값을 increment에 맞게 증가
insert into tmp_tbl values(tmp_seq.NEXTVAL, 'bbb', 22);	id값이 2

select tmp_seq.CURRVAL from dual;
			-CURRVAL : 현재의 sequence값 출력





======================================================================
		제약조건(constraint)
======================================================================
select * from ALL_CONSTRAINTS where TABLE_NAME='테이블명(대문자)'
select * from ALL_CONS_COLUMNS where TABLE_NAME='테이블명(대문자)'
- 테이블 제약조건 열람

select A.CONSTRAINT_NAME, A.TABLE_NAME, A.CONSTRAINT_TYPE, B.COLUMN_NAME
from ALL_CONSTRAINTS A, ALL_CONS_COLUMNS B
where A.CONSTRAINT_NAME=B.CONSTRAINT_NAME and A.TABLE_NAME='테이블명(대문자)';
- 위의 두 줄 동시 열람 가능

<<Primary Key>> - 테이블생성시 , 테이블생성이후
alter table 테이블명 drop primary key;
- 테이블에 설정된 primary key 삭제

alter table 테이블명 add constraint 제약조건이름 primary key(컬럼명 - 복수가능);
- 해당 컬럼을 primary key로 만들고 제약조건 이름을 붙임

alter table 테이블명 drop constraint 제약조건이름;
- 해당 제약조건을 삭제한다.





======================================================================
		기타 제약 조건들 모음
======================================================================

- foreign key(외래키)
테이블이 2개 이상일때 다른 테이블의 컬럼을 받아와서 설정가능

alter table 받을테이블명 add constraint 제약조건이름 foreign key(받을컬럼명) references 가져올테이블명(가져올컬럼명) on delete cascade

* 오라클에서는 on update cascade를 지원하지 않아서, 트리거 설정을 이용해 기능을 구현함
* 외래키를 가져오는 테이블은 삭제가 불가능하다
	drop table 테이블명 cascade constraints
로 강제 삭제가 가능하나 권장하지 않음



- unique
중복되지 않는 유일한 값이지만 NULL을 허용한다(e-mail주소에서 자주 이용됨)



- CHECK
컬럼에 조건을 정해서 입력되는 값을 검사하는 제약조건
단 이미 컬럼내부에 위반되는 값이 있다면 조건으로 설정 불가능
ex)나이 컬럼에 대한 check를 10살이하로 하고싶어도 이미 11살이 컬럼 내부에 있으면 불가능

<<사용 예제>
1. 테이블 생성시에 컬럼 입력때
컬럼명 컬럼타입 check(컬럼명에 대한 조건)

2. null 값 비허용
check(컬럼명 is not null)



- Default
값을 입력하지 않았을때 기본적으로 입력되는 값을 정의함

alter table 테이블명 modify(컬럼명1값 default 설정할값)
insert into 테이블명 values(default, 컬럼명2값)
- 신규 값 삽입시 default자리에 설정할 값이 들어가게 된다





======================================================================
		INDEX
======================================================================

인덱스는 데이터베이스 테이블에 있는 데이터를 빨리 찾기 위한(조회) 용도의 기술

<<예제>>
select * from USER_INDEXES where TABLE_NAME = '테이블명';

create index 인덱스명 on 테이블명(설정할 컬럼명 - 복수설정가능)
- 직접 인덱스를 설정할 수도 있다.

drop index 인덱스명
- 해당 인덱스 삭제(단 해당 인덱스의 컬럼이 pk나 unique라면 삭제 불가능 -> 해제 후 삭제가능)





======================================================================
		트랜잭션(Commit와 Rollback)
======================================================================
트랜잭션의 특징
- 원자성 (Atomicity)
- 일관성 (Consistency)
- 독립성 (Isolation)
- 지속성 (Durability)

- commit
다른 여러 명령어들을 정상적으로 데이터베이스에 반영하겠다는 명령어
create, drop 등의 명령문을 수행해도 자동적으로 commit가 된다.

- rollback (to 지정이름)
잘못된 명령이나 잘못된 데이터를 입력했을때 commit 이전 상태로 돌아가는 명령어

- savepoint 지정이름
현재시점까지의 테이블과 명령어들을 기억한다.
단 commit이 된다면 여태까지의 savepoint는 모두 사라진다





======================================================================
		Join(집합개념)
======================================================================
JOIN의 종류
- ANCI JOIN, ORACLE JOIN


-------- ANCI JOIN --------
<<inner join>> - 부분집합
select *
from 테이블명
inner join 테이블명2
on 테이블명.컬럼 = 테이블명2.컬럼

- 두 컬럼은 자료형이 같아야한다.
- 두 테이블을 합친 컬럼 리스트들을 출력함(둘 다 컬럼값이 동시에 존재해야 출력, 없으면 안나옴)

					*별칭은 생략가능
select 별칭1또는별칭2.컬럼명1, 컬럼명2, 컬럼명3
from 테이블명 별칭1
inner join 테이블명2 별칭2
on 별칭1.컬럼명1 = 별칭2.컬럼명1

- 각 테이블에 같은 이름의 컬럼이 있으면 select 사용시 중복 컬럼앞에 테이블명(별칭)을 붙여야한다



<<left / right outer join>> - 순서 기준(left1, right2)으로 테이블을 조합
select *
from 테이블명1 별칭1
left outer join 테이블명2 별칭2		테이블명1 기준 null값인것도 출력(left)
또는
right outer join 테이블명2 별칭2		테이블명2 기준 null값인것도 출력(right)
on 테이블명1.같은컬럼 = 테이블명2.같은컬럼



<<full outer join>> - 각 테이블의 모든 null값을 같이 출력함(합집합)
select *
from 테이블명1 별칭1
full outer join 테이블명2 별칭2
on 별칭1.같은컬럼 = 별칭2.같은컬럼



<<cross join>> - 각 테이블을 서로 교차하여 모두 출력함
select * from 테이블명1, 테이블명2;



<<self join>> - 같은 테이블끼리 서로 교차하여 출력함
select * from 테이블명1 별칭1, 테이블명1 별칭2;
on 출력조건;

(예제)
create table emptbl(emp char(15), manager char(15), empTel varchar(15));
insert into emptbl values('나사장',null,'0000');
insert into emptbl values('재무실장','나사장','1111');
insert into emptbl values('김부장','재무실장','2222');
insert into emptbl values('이부장','재무실장','3333');
insert into emptbl values('이대리','김부장','4444');
insert into emptbl values('정대리','이부장','5555');
insert into emptbl values('지사원','이부장','6666');
insert into emptbl values('강사원','김부장','7777');

select * from emptbl;
- 부하 직원별 직속상관의 연락처

select *
from emptbl E1 join emptbl E2
on E1.manager = E2.emp;



-------- ORACLE JOIN --------
<<Equal join>> - (교집합)=를 사용하는 join(inner join이 여기에 해당한다)
select *
from 테이블명1 별칭1, 테이블명2 별칭2
where 별칭1.같은컬럼 = 별칭2.같은컬럼



<<NonEqual join>> - =이외의 연산자를 사용하는 join(equal join을 제외한 join들)
select *
from 테이블명1 별칭1, 테이블명2 별칭2
where 별칭1.같은컬럼 = 별칭2.같은컬럼 and 컬럼조건;



<<Natural Join>> - 테이블에서 동일한 이름을 가진 컬럼이 모두 join됨
select * from 테이블명1 natural join 테이블명2;



<<using>> - 지정된 이름을 갖는 컬럼만 join됨(해당 컬럼은 두 테이블 모두 공통일때)
select * from 테이블명1 join 테이블명2 using(컬럼명);





======================================================================
		VIEW(열람)
======================================================================

원하는 조건(join)등에 맞는 컬럼을 열람할 수 있으며 테이블 내 컬럼 변경도 가능하다
				- 제약조건에 걸리지 않을때
				- select에 이름붙이기라 생각하면 이해하기 쉽다

create or replace view 뷰이름 as
select 컬럼명 from 테이블명;
with read only			- 해당 명령어가 붙으면 읽기전용이 되어 변경 불가

insert into 뷰이름 values(컬럼값);		- 해당컬럼 외 다른컬럼이 제약조건이 없다면 가능


(예제)
create or replace view view_02 as
select col1, col3 from a_tbl;

select * from view_02;

insert into view_02 values(10,20);	- 뷰로 설정한 컬럼1,3이외엔 제약조건이 없어서 삽입가능
insert into view_02 values(30,40);
select * from view_02;
select * from a_tbl;

create or replace view view_03 as
select col2, col4 from a_tbl;

insert into view_03 values(11,21); 	- 뷰에 들어가지않는 1,3번이 제약 조건이 있어서 불가능
insert into view_03 values(31,41);

create or replace view view_02 as
select col1, col3 from a_tbl
with read only;                   		- 읽기전용설정
insert into view_02 values(7,8);  	- insert 불가능